swagger: '2.0'
info:
  title: 'E-Commerce API'
  description: 'api'
  version: '1.0.0'
host: '127.0.0.1:5000'
schemes:
  - 'http'
consumes:
  - 'application/json'
produces:
  - 'application/json'
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths: 
  /accounts/login:
    post:
      tags:
        - accounts
      summary: 'Login endpoint'
      description: 'Endpoint for user authentication'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Credentials for login'
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        200:
          description: 'Login successful'
          schema: 
            $ref: '#/definitions/LoginResponse'
          examples:
            application/json:
              value:
                auth_token: 'eyJHbGc10i...'
                message: 'Login successful'
                status: 'success'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'Invalid credentials'
  /customers:
    get:
      tags:
        - customers
      summary: 'Get All Customers'
      description: 'Retrieve a list of all customers'
      responses:
        '200':
          description: 'Successful Response'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Customer'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'token is missing | token expired | invalid token'
        403:
          description: 'Forbidden'
          schema: 
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value: 
                status: 'error'
                message: 'user does not have the required role'
  /products:
    get:
      tags:
        - products
      summary: 'Get All Products'
      description: 'Retrieve a list of all products'
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Product'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'token is missing | token expired | invalid token'
        403:
          description: 'Forbidden'
          schema: 
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value: 
                status: 'error'
                message: 'user does not have the required role'
    post:
      tags:
        - products
      summary: 'Save a product to database'
      description: 'Save one product to database'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Data for Product'
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Product'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'token is missing | token expired | invalid token'
        403:
          description: 'Forbidden'
          schema: 
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value: 
                status: 'error'
                message: 'user does not have the required role'
  /orders:
    get:
      tags:
        - orders
      summary: 'Get All Orders'
      description: 'Retrieve a list of all orders'
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Order'
        400:
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'Bad Request'
    post:
      tags:
        - orders
      summary: 'Save an order to database'
      description: 'Save one order to database'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Data for Order'
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Order'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value:
                status: 'error'
                message: 'token is missing | token expired | invalid token'
        403:
          description: 'Forbidden'
          schema: 
            $ref: '#/definitions/Error'
          examples:
            application/json:
              value: 
                status: 'error'
                message: 'user does not have the required role'
      security: 
        - bearerAuth: []
definitions: 
  LoginCredentials:
    type: 'object'
    properties:
      username:
        type: 'string'
        description: 'Username'
      password:
        type: 'string'
        format: 'password'
        description: 'Password'
    required:
      - 'username'
      - 'password'
  LoginResponse:
    type: 'object'
    properties:
      auth_token:
        type: 'string'
        description: 'Authentication token'
      message:
        type: 'string'
        description: 'message indicating success or failure'
      status:
        type: 'string'
        description: 'Status of the operation'
    required:
      - 'auth_token'
      - 'message'
  Error:
    type: 'object'
    properties:
      status:
        type: 'string'
        description: 'Status of the error'
      message:
        type: 'string'
        description: 'Description of the error'
      required:
        - 'status'
        - 'message'
  Customer:
    type: 'object'
    properties:
      name:
        type: 'string'
        description: 'Customer name'
      email:
        type: 'string'
        description: 'Customer email'
      phone:
        type: 'string'
        description: 'Customer phoone number'
      id:
        type: 'integer'
        format: 'int64'
        description: 'Customer unique id'
    required:
      - 'name'
      - 'email'
      - 'phone'
      - 'id'
  Product:
    type: 'object'
    properties:
      name:
        type: 'string'
        description: 'Product name'
      price:
        type: 'number'
        format: 'decimal'
        description: 'Product price'
      id:
        type: 'integer'
        format: 'int64'
        description: 'Customer unique id'
    required:
      - 'name'
      - 'price'
  Order:
    type: 'object'
    properties:
      customer_id:
        type: 'integer'
        format: 'int64'
        description: 'Customer id'
      products:
        type: 'array'
        description: 'product list'
      date:
        type: 'string'
        description: 'date ordered'
      required:
        - 'customer_id'
        - 'products'
        - 'date'